{
    "name": "neo4j-sink",
    "config": {
        "name" : "neo4j-sink",
        "connector.class" : "streams.kafka.connect.sink.Neo4jSinkConnector",
        "tasks.max" : "1",
        "topics" : "departments,specialities,department_speciality,groups,courses,group_course,classes,schedule,students",
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://schema-registry:8081",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter.schema.registry.url": "http://schema-registry:8081",
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "neo4j.server.uri" : "bolt://neo4j:7687",
        "neo4j.topic.cypher.departments" : "MERGE (d:Department {id: event.id}) SET d += {code: event.code, title: event.title}",
        "neo4j.topic.cypher.specialities" : "MERGE (s:Speciality {id: event.id}) SET s += {code: event.code, title: event.title}",
        "neo4j.topic.cypher.department_speciality" : "MERGE (d:Department {id: event.department_id}) MERGE (s:Speciality {id: event.speciality_id}) MERGE (d)-[:HAS_SPECIALITY]->(s)",
        "neo4j.topic.cypher.groups" : "MERGE (g:Group {id: event.id}) MERGE (d:Department {id: event.department_id}) MERGE (s:Speciality {id: event.speciality_id}) MERGE (d)-[:OFFERS_GROUP]->(g)-[:HAS_SPECIALITY]->(s) SET g += {title: event.title}",
        "neo4j.topic.cypher.courses" : "MERGE (c:Course {id: event.id}) MERGE (d:Department {id: event.department_id}) MERGE (d)-[:HAS_COURSE]->(c) SET c += {title: event.title, scheduled_hours: event.scheduled_hours}",
        "neo4j.topic.cypher.group_course" : "MERGE (g:Group {id: event.group_id}) MERGE (c:Course {id: event.course_id}) MERGE (g)-[:STUDY_COURSE]->(c)",
        "neo4j.topic.cypher.classes" : "MERGE (cl:Class {id: event.id}) MERGE (c:Course {id: event.course_id}) MERGE (c)-[:HAS_CLASS]->(cl) SET cl += {title: event.title, type_id: event.type_id, equipment: event.equipment}",
        "neo4j.topic.cypher.schedule" : "MERGE (sc:Schedule {id: event.id}) MERGE (cl:Class {id: event.class_id}) MERGE (g:Group {id: event.group_id}) MERGE (cl)<-[:REFERS_TO_CLASS]-(sc)-[:REFERS_TO_GROUP]->(g) SET sc += {date: event.date, pair_number: event.pair_number}",
        "neo4j.topic.cypher.students" : "MERGE (s:Student {id: event.id}) MERGE (g:Group {id: event.group_id}) MERGE (s)-[:STUDY_IN]->(g) SET s += {fullname: event.fullname, code: event.code}",
        "transforms": "ExtractAfter",
        "transforms.ExtractAfter.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
        "transforms.ExtractAfter.field": "after"
    }
}